// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: movie.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createMovie = `-- name: CreateMovie :exec
INSERT INTO movies
 (title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateMovieParams struct {
	Title        string   `json:"title"`
	Duration     int32    `json:"duration"`
	Description  string   `json:"description"`
	ActorAvatars []string `json:"actor_avatars"`
	Trailer      string   `json:"trailer"`
	FilePath     string   `json:"file_path"`
	Thumbnail    string   `json:"thumbnail"`
	Views        int32    `json:"views"`
	Stars        int32    `json:"stars"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) error {
	_, err := q.exec(ctx, q.createMovieStmt, createMovie,
		arg.Title,
		arg.Duration,
		arg.Description,
		pq.Array(arg.ActorAvatars),
		arg.Trailer,
		arg.FilePath,
		arg.Thumbnail,
		arg.Views,
		arg.Stars,
	)
	return err
}

const getListMovies = `-- name: GetListMovies :many
SELECT id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at FROM movies
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetListMoviesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetListMovies(ctx context.Context, arg GetListMoviesParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.getListMoviesStmt, getListMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.queryRow(ctx, q.getMovieStmt, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Duration,
		&i.Description,
		pq.Array(&i.ActorAvatars),
		&i.Trailer,
		&i.FilePath,
		&i.Thumbnail,
		&i.Views,
		&i.Stars,
		&i.CreatedAt,
	)
	return i, err
}

const getMoviesByGenre = `-- name: GetMoviesByGenre :many
SELECT id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at, movie_id, genre_id FROM movies
JOIN movie_genres ON movies.id = movie_genres.movie_id
WHERE movie_genres.genre_id = $1
ORDER BY movies.id
LIMIT $2
OFFSET $3
`

type GetMoviesByGenreParams struct {
	GenreID int32 `json:"genre_id"`
	Limit   int64 `json:"limit"`
	Offset  int64 `json:"offset"`
}

type GetMoviesByGenreRow struct {
	ID           int32     `json:"id"`
	Title        string    `json:"title"`
	Duration     int32     `json:"duration"`
	Description  string    `json:"description"`
	ActorAvatars []string  `json:"actor_avatars"`
	Trailer      string    `json:"trailer"`
	FilePath     string    `json:"file_path"`
	Thumbnail    string    `json:"thumbnail"`
	Views        int32     `json:"views"`
	Stars        int32     `json:"stars"`
	CreatedAt    time.Time `json:"created_at"`
	MovieID      int32     `json:"movie_id"`
	GenreID      int32     `json:"genre_id"`
}

func (q *Queries) GetMoviesByGenre(ctx context.Context, arg GetMoviesByGenreParams) ([]GetMoviesByGenreRow, error) {
	rows, err := q.query(ctx, q.getMoviesByGenreStmt, getMoviesByGenre, arg.GenreID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesByGenreRow{}
	for rows.Next() {
		var i GetMoviesByGenreRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
			&i.MovieID,
			&i.GenreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesBySerie = `-- name: GetMoviesBySerie :many
SELECT movies.id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at, movies_series.id, movie_id, series_id FROM movies
JOIN  movies_series ON movies.id = movies_series.movie_id
WHERE movies_series.id = $1
ORDER BY movies.id
LIMIT $2
OFFSET $3
`

type GetMoviesBySerieParams struct {
	ID     int32 `json:"id"`
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetMoviesBySerieRow struct {
	ID           int32     `json:"id"`
	Title        string    `json:"title"`
	Duration     int32     `json:"duration"`
	Description  string    `json:"description"`
	ActorAvatars []string  `json:"actor_avatars"`
	Trailer      string    `json:"trailer"`
	FilePath     string    `json:"file_path"`
	Thumbnail    string    `json:"thumbnail"`
	Views        int32     `json:"views"`
	Stars        int32     `json:"stars"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         int32     `json:"id_2"`
	MovieID      int32     `json:"movie_id"`
	SeriesID     int32     `json:"series_id"`
}

func (q *Queries) GetMoviesBySerie(ctx context.Context, arg GetMoviesBySerieParams) ([]GetMoviesBySerieRow, error) {
	rows, err := q.query(ctx, q.getMoviesBySerieStmt, getMoviesBySerie, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesBySerieRow{}
	for rows.Next() {
		var i GetMoviesBySerieRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
			&i.ID_2,
			&i.MovieID,
			&i.SeriesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentMovies = `-- name: GetRecentMovies :many
SELECT id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at FROM movies
ORDER BY movies.created_at DESC
LIMIT $1
OFFSET $2
`

type GetRecentMoviesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetRecentMovies(ctx context.Context, arg GetRecentMoviesParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.getRecentMoviesStmt, getRecentMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatchingMovies = `-- name: GetWatchingMovies :many
SELECT movies.id, movies.title, movies.duration, movies.description, movies.actor_avatars, movies.trailer, movies.file_path, movies.thumbnail, movies.views, movies.stars, movies.created_at , movie_history.watched_duration, movie_history.last_watched FROM movies
JOIN movie_history ON movies.id = movie_history.movie_id
WHERE movie_history.user_id = $1 AND (movie_history.watched_duration / movies.duration) > 0.9
ORDER BY movie_history.last_watched DESC
LIMIT $2
OFFSET $3
`

type GetWatchingMoviesParams struct {
	UserID int32 `json:"user_id"`
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetWatchingMoviesRow struct {
	ID              int32     `json:"id"`
	Title           string    `json:"title"`
	Duration        int32     `json:"duration"`
	Description     string    `json:"description"`
	ActorAvatars    []string  `json:"actor_avatars"`
	Trailer         string    `json:"trailer"`
	FilePath        string    `json:"file_path"`
	Thumbnail       string    `json:"thumbnail"`
	Views           int32     `json:"views"`
	Stars           int32     `json:"stars"`
	CreatedAt       time.Time `json:"created_at"`
	WatchedDuration int32     `json:"watched_duration"`
	LastWatched     time.Time `json:"last_watched"`
}

func (q *Queries) GetWatchingMovies(ctx context.Context, arg GetWatchingMoviesParams) ([]GetWatchingMoviesRow, error) {
	rows, err := q.query(ctx, q.getWatchingMoviesStmt, getWatchingMovies, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWatchingMoviesRow{}
	for rows.Next() {
		var i GetWatchingMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
			&i.WatchedDuration,
			&i.LastWatched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMovies = `-- name: SearchMovies :many
SELECT id, title, duration, description, actor_avatars, trailer, file_path, thumbnail, views, stars, created_at FROM movies
WHERE movies.title LIKE '%' || $1 || '%'
ORDER BY movies.id
LIMIT $2
OFFSET $3
`

type SearchMoviesParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int64          `json:"limit"`
	Offset  int64          `json:"offset"`
}

func (q *Queries) SearchMovies(ctx context.Context, arg SearchMoviesParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.searchMoviesStmt, searchMovies, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Description,
			pq.Array(&i.ActorAvatars),
			&i.Trailer,
			&i.FilePath,
			&i.Thumbnail,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
