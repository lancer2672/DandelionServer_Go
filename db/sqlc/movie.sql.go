// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: movie.sql

package database

import (
	"context"
	"database/sql"
)

const getMovie = `-- name: GetMovie :one
SELECT id, title, description, file_path, thumbnail, series_id, views, stars, created_at FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.FilePath,
		&i.Thumbnail,
		&i.SeriesID,
		&i.Views,
		&i.Stars,
		&i.CreatedAt,
	)
	return i, err
}

const getMoviesByGenre = `-- name: GetMoviesByGenre :many
SELECT id, title, description, file_path, thumbnail, series_id, views, stars, created_at, movie_id, genre_id FROM movies
JOIN movie_genres ON movies.id = movie_genres.movie_id
WHERE movie_genres.genre_id = $1
ORDER BY movies.id
LIMIT $2
OFFSET $3
`

type GetMoviesByGenreParams struct {
	GenreID int32
	Limit   int64
	Offset  int64
}

type GetMoviesByGenreRow struct {
	ID          int32
	Title       sql.NullString
	Description sql.NullString
	FilePath    sql.NullString
	Thumbnail   sql.NullString
	SeriesID    sql.NullInt32
	Views       sql.NullInt32
	Stars       sql.NullInt32
	CreatedAt   sql.NullTime
	MovieID     int32
	GenreID     int32
}

func (q *Queries) GetMoviesByGenre(ctx context.Context, arg GetMoviesByGenreParams) ([]GetMoviesByGenreRow, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByGenre, arg.GenreID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMoviesByGenreRow{}
	for rows.Next() {
		var i GetMoviesByGenreRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.FilePath,
			&i.Thumbnail,
			&i.SeriesID,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
			&i.MovieID,
			&i.GenreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesBySeries = `-- name: GetMoviesBySeries :many
SELECT id, title, description, file_path, thumbnail, series_id, views, stars, created_at FROM movies
WHERE series_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetMoviesBySeriesParams struct {
	SeriesID sql.NullInt32
	Limit    int64
	Offset   int64
}

func (q *Queries) GetMoviesBySeries(ctx context.Context, arg GetMoviesBySeriesParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesBySeries, arg.SeriesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.FilePath,
			&i.Thumbnail,
			&i.SeriesID,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, description, file_path, thumbnail, series_id, views, stars, created_at FROM movies
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMoviesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.FilePath,
			&i.Thumbnail,
			&i.SeriesID,
			&i.Views,
			&i.Stars,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
