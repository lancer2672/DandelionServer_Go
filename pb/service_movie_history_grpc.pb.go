// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service_movie_history.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dandelion_CreateMovieHistory_FullMethodName = "/pb.Dandelion/CreateMovieHistory"
	Dandelion_GetMovieHistory_FullMethodName    = "/pb.Dandelion/GetMovieHistory"
)

// DandelionClient is the client API for Dandelion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DandelionClient interface {
	CreateMovieHistory(ctx context.Context, in *CreateMovieHistoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMovieHistory(ctx context.Context, in *GetMovieHistoryRequest, opts ...grpc.CallOption) (*GetMovieHistoryResponse, error)
}

type dandelionClient struct {
	cc grpc.ClientConnInterface
}

func NewDandelionClient(cc grpc.ClientConnInterface) DandelionClient {
	return &dandelionClient{cc}
}

func (c *dandelionClient) CreateMovieHistory(ctx context.Context, in *CreateMovieHistoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Dandelion_CreateMovieHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dandelionClient) GetMovieHistory(ctx context.Context, in *GetMovieHistoryRequest, opts ...grpc.CallOption) (*GetMovieHistoryResponse, error) {
	out := new(GetMovieHistoryResponse)
	err := c.cc.Invoke(ctx, Dandelion_GetMovieHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DandelionServer is the server API for Dandelion service.
// All implementations must embed UnimplementedDandelionServer
// for forward compatibility
type DandelionServer interface {
	CreateMovieHistory(context.Context, *CreateMovieHistoryRequest) (*empty.Empty, error)
	GetMovieHistory(context.Context, *GetMovieHistoryRequest) (*GetMovieHistoryResponse, error)
	mustEmbedUnimplementedDandelionServer()
}

// UnimplementedDandelionServer must be embedded to have forward compatible implementations.
type UnimplementedDandelionServer struct {
}

func (UnimplementedDandelionServer) CreateMovieHistory(context.Context, *CreateMovieHistoryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovieHistory not implemented")
}
func (UnimplementedDandelionServer) GetMovieHistory(context.Context, *GetMovieHistoryRequest) (*GetMovieHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieHistory not implemented")
}
func (UnimplementedDandelionServer) mustEmbedUnimplementedDandelionServer() {}

// UnsafeDandelionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DandelionServer will
// result in compilation errors.
type UnsafeDandelionServer interface {
	mustEmbedUnimplementedDandelionServer()
}

func RegisterDandelionServer(s grpc.ServiceRegistrar, srv DandelionServer) {
	s.RegisterService(&Dandelion_ServiceDesc, srv)
}

func _Dandelion_CreateMovieHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DandelionServer).CreateMovieHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dandelion_CreateMovieHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DandelionServer).CreateMovieHistory(ctx, req.(*CreateMovieHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dandelion_GetMovieHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DandelionServer).GetMovieHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dandelion_GetMovieHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DandelionServer).GetMovieHistory(ctx, req.(*GetMovieHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dandelion_ServiceDesc is the grpc.ServiceDesc for Dandelion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dandelion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Dandelion",
	HandlerType: (*DandelionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovieHistory",
			Handler:    _Dandelion_CreateMovieHistory_Handler,
		},
		{
			MethodName: "GetMovieHistory",
			Handler:    _Dandelion_GetMovieHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_movie_history.proto",
}
